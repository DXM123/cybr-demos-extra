#!/bin/bash
# Snippet that contains internal functions for scripts
#========== Functions  ===============
function check_if_command_exists {
if ! command -v "$1" &> /dev/null
then
    echo "Please install $1 and re-run the script"
    exit 1
fi
}

function compare_version() {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

function test_version() {
	compare_version "$1" "$2"
	case $? in
        	0) echo equal;;
	        1) echo newer;;
        	2) echo older;;
	esac
}

function decide_values_for_playbook {
    check_if_command_exists ansible
    ANSIBLE_VERSION=$(ansible --version | head -n 1)
    ANSIBLE_VERSION=${ANSIBLE_VERSION#*[* }
    ANSIBLE_VERSION=${ANSIBLE_VERSION%]*}
    VERSION=$(test_version "$ANSIBLE_VERSION" "2.8")
    if [ "$VERSION" == "newer" ]; then
        VERSION=$(test_version "$ANSIBLE_VERSION" "2.9")
        if [ $VERSION == "equal" ]; then
            export ANSIBLE_PLUGIN=new
            export LOOKUP_CMD=cyberark.conjur.conjur_variable
        elif [ $VERSION == "older" ]; then
            export ANSIBLE_PLUGIN=old
            export LOOKUP_CMD=conjur_variable
        else
            ANSIBLE_PLUGIN=new
            export LOOKUP_CMD=cyberark.conjur.conjur_variable 
        fi
    elif [ $VERSION == "equal" ]; then 
        export ANSIBLE_PLUGIN=old
        export LOOKUP_CMD=conjur_variable
    else
        export ANSIBLE_PLUGIN=not_supported
    fi
}